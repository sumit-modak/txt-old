;; Necessary: the `defcfg` block

(defcfg
  input  (device-file "/dev/input/by-path/platform-i8042-serio-0-event-kbd")

  ;; To understand the importance of the following line, see the section on
  ;; Compose-key sequences at the near-bottom of this file.
  output (uinput-sink "My KMonad output" "sleep 1 && setxkbmap -option compose:ralt")

  cmp-seq ralt           ;; Set the compose key to `RightAlt'
  cmp-seq-delay 5        ;; 5ms delay between each compose-key sequence press
  key-seq-delay 5        ;; 5ms delay between each outputted key event
  fallthrough true       ;; Comment this if you want unhandled events not to be emitted
  allow-cmd true         ;; Set this to false to disable any command-execution in KMonad
  implicit-around around ;; Set the implicit around to `around`
)


;; Necessary: at least 1 `defsrc` block

(defsrc
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet cmp  rctl
)

(defsrc :name numpad
  nlck kp/ kp* kp-
  kp7  kp8 kp9 kp+
  kp4  kp5 kp6
  kp1  kp2 kp3 kprt
  kp0    kp.
)


;; Optional : `defalias` statements

(defalias
  num  (layer-toggle numbers) ;; Bind num to a button that switches to a layer
  kil  C-A-del                ;; Bind kil to a button that Ctrl-Alt-deletes
)


;; Necessary: at least 1 `deflayer` block

(deflayer qwerty
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl @num lalt           spc            ralt rmet @sym @tst
)

(deflayer phone :source numpad
  :implicit-around disabled
  nlck kp/ kp* kp-
  kp1  kp2 kp3 kp+
  kp4  kp5 kp6
  kp7  kp8 kp9 kprt
  kp0    kp.
)


;; Optional: as many layers as you please

(deflayer numbers
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    XX   /    7    8    9    -    _    _    _
  _    _    _    _    _    XX   *    4    5    6    +    _    _
  _    _    \(   \)   .    XX   0    1    2    3    _    _
  _    _    _              _              _    _    _    _
)


#| --------------------------------------------------------------------------
                  Optional: press-only / release-only buttons

  - `(press-only x)` : Send the *press* of x when this button is tapped
  - `(release-only x)` : Send the *release* of x when this button is tapped

  It is possible to define buttons that only press or release a virtual output
  button. They are useful in tap-macros, especially ones that are going to be
  executed in a 'known context'. Assume you want to use your physical alt button
  to *both* open a layer, but also to function as a basic `alt` key. This can be
  achieved by `(around met (layer-toggle my-layer))`. However, if you have a macro
  inside `my-layer` that taps alt, then this would release alt until the layer is
  reactivated (by physically releasing and repressing the `alt` key). The macro,
  however, can instead be affixed by `(press-only met)`, making the last step of
  the macro the reactivation of the `alt` key, solving the problem.

  -------------------------------------------------------------------------- |#
  
;; Optional: modded buttons

  (defalias

  ;; Something useful
  cpy C-c
  pst C-v
  cut C-x

  ;; Something silly
  md1 (around a (around b c))    ;; abc
  md2 (around a (around-only lsft b)) ;; aB
  md3 C-A-M-S-l
  md4 (around % b)               ;; BEWARE: %B, not %b, do you see why?
  md5 (around-when-alone lctl c)
)


;; Optional: sticky keys

;; Let's make both shift keys sticky
(defalias
  sl (sticky-key 300 lsft)
  sr (sticky-key 300 rsft))


;; Optional: stepped buttons

(defalias
  ctl-lck (stepped (press-only lctl) (release-only lctl)))

(defalias tst (around (layer-toggle macro-test)
                (around (layer-toggle layer-test)
                  (around (layer-toggle around-next-test)
                    (around (layer-toggle command-test)
                            (layer-toggle modded-test))))))

(deflayer modded-test
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    @md4 _    _    _    _    _    _    _    _    _    _    _
  _    _    @md1 @md2 @md3 _    _    _    _    _    _    _    _
  _    _    @cut @cpy @pst _    _    _    _    _    _    _
  _    _    _              _              _    _    _    _
)


;; Optional: tap-macros

(defalias
  mc1 #(K M o n a d)
  mc2 #(C-c P50 A-tab P50 C-v) ;; Careful, this might do something
  mc3 #(P200 h P150 4 P100 > < P50 > < P20 0 r z 1 ! 1 ! !)
  mc4 (tap-macro a (pause 50) @md2 (pause 50) c)
  mc5 (tap-macro-release esc esc esc)
  mc6 #(@mc3 spc @mc3 spc @mc3)
)

(deflayer macro-test
  _    @mc1 @mc2 @mc3 @mc4 @mc5 @mc6 _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _              _              _    _    _    _
)


;; Optional: layer manipulation

(defalias

  yah (layer-toggle asking-for-trouble) ;; Completely safe
  nah (layer-add asking-for-trouble)    ;; Completely unsafe

  ld1 (layer-delay 500 numbers) ;; One way to get a leader-key
  ld2 (layer-next numbers)      ;; Another way to get a leader key

  ;; NOTE, this is safe because both `qwerty` and `colemak` contain the `@tst`
  ;; button which will get us to the `layer-test` layer, which itself contains
  ;; both `@qwe` and `@col`.
  qwe (layer-switch qwerty) ;; Set qwerty as the base layer
  col (layer-switch colemak) ;; Set colemak as the base layer
)
(deflayer layer-test
  @qwe _    _    _    _    _    _    _    _    _    _    @add _    @nah
  @col _    _    _    _    _    _    _    _    _    _    _    _    @yah
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    @ld1 @ld2 _
  _    _    _              _              _    _    _    _
)

;; Exactly like qwerty, but with the letters switched around
(deflayer colemak
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    f    p    g    j    l    u    y    ;    [    ]    \
  @xcp a    r    s    t    d    h    n    e    i    o    '    ret
  @sl  z    x    c    v    b    k    m    ,    .    /    @sr
  lctl @num lalt           spc            ralt rmet @sym @tst
)

(defalias lol #(: - D))

;; Contrived example
(deflayer asking-for-trouble
  @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol
  @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol
  @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol
  @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol @lol
  @lol @lol @lol           @lol           @lol @lol @lol @lol
)

;; One way to safely use layer-add and layer-rem: the button bound to layer-add
;; is the same button bound to layer-rem in the layer that `add` adds to the
;; stack. I.e., it becomes impossible to add or remove multiple copies of a
;; layer.
(defalias
  add (layer-add multi-overlay) ;; multi-overlay is defined in the next
  rem (layer-rem multi-overlay) ;; section below this
)


;; Optional: Multi-use buttons

(defalias
  xtn (tap-next x lsft)         ;; Shift that does 'x' on tap
  xth (tap-hold 400 x lsft)     ;; Long delay for easier testing
  thn (tap-hold-next 400 x lsft)
  tnr (tap-next-release x lsft)
  tnp (tap-next-press x lsft)
  thp (tap-hold-next-press 2000 x lsft)
  tnh (tap-hold-next-release 2000 x lsft)

  ;; Used it the colemak layer
  xcp (tap-hold-next 400 esc ctl)
)

;; Some of the buttons used here are defined in the next section
(deflayer multi-overlay
  @mt  _    _    _    _    _    _    _    _    _    _    _    @rem _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  @thn _    _    _    _    _    _    _    _    _    _    _    _
  @xtn @thp _    _    _    _    _    _    _    _    _    @xth
  @tnr @tnp _              _              _    _    _    @tnh
)


;; Optional: Multi-tap

(defalias
  mt  (multi-tap 300 a 300 b 300 c 300 d e))


;; Optional: Around-next

(defalias
  ns  (around-next sft)        ;; Shift until the release of the next press
  ns' (around-next-single sft) ;; Shift the next event
  nnm (around-next @num)       ;; Perform next press in numbers layer
  ntm (around-next-timeout 500 sft XX)
  inn (before-after-next tab S-tab)


)

(deflayer around-next-test
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  @ns  _    _    _    _    _    _    _    _    _    _    _    _
  @nnm _    _    _    _    _    _    _    _    _    _    _
  @ntm _    _              _              _    _    _    _
)


;; Optional: Compose-key sequences

(defalias
  sym (layer-toggle symbols)

)

(deflayer symbols
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    ä    é    ©    _    _    _    _    _    _    _    _    _    _
  _    +'   +~   +`   +^   _    _    _    _    _    _    _    _
  _    +"   +,   _    _    _    _    _    _    _    _    _
  _    _    _              _              _    _    _    _)


;; Optional: Command buttons

(defalias
  dat (cmd-button "date >> /tmp/kmonad_example.txt")   ;; Append date to tmpfile
  pth (cmd-button "echo $PATH > /tmp/kmonad_path.txt") ;; Write out PATH
  ;; `dat' on press and `pth' on release
  bth (cmd-button "date >> /tmp/kmonad_example.txt"
                  "echo $PATH > /tmp/kmonad_path.txt")
)

(deflayer command-test
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    @dat @pth _
  _    _    _              _              _    _    _    _
)
