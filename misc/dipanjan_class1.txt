probablistic analysis and randomized algorithms
	- analysis of algorithms based on probablity
	- an algorithm is said to be randomized in behaviour if the output produced is dependent on random generation

the hiring problem algorithm

	hire(n) {
		best = 0
		for i = 1 to n {
			if candidate[i] better than current_best {
				current_best = i
				hire_candidate(ci)
			}
		}
	}

	situation:- 
		n candidates are interviewed 
		m candidates are hired

	where m <= n
	Total Cost = O(nCi + mCh)

	worst case:-
		agency is sending the candidates in increasing order of quality

		Ci :		1	2	3 	4	5
		Ri :		1 	3 	7	10 	15
		--------------------------------
		Selected	y	y 	y	y	y
		Fired		x	x	x	x	x

		Total Cost = O(nCi + nCh)

		Inferene: Number of candidates interviewed = Number of candidates hired
		Objetive: Reducing the total cost
		Strategy: There should be no control on the ordering present in which the candidates are sent by the agency for interview
		Solution: 1) Randomize the input distribution
				  2) Apply probablistic analysis
		Assumptions: Candidates will appear in any random order
				  1) Agency will only provide the list of candidates
				  2) Manager will all the candidates in random order
				Note:- Input has been randomized
				Actual Running Time = Expected Running Time

	   Indicator Random Variable (IRV):-
		    Method to convert the probabilities to corresponding expectations and vice versa
			Indiator variable: I{A} where 
				I{A} = 1; if event A occurs
					   0; otherwise

			For example:- 
				Tossing a coin:
				Xh = I{H} = 1; if head occurs
							0; otherwise

				H -> occurance of head while tossing a coin 

				Now in a flip;
					E(Xh) = E(I{H})
						  = 1 * Probablity{H} + 0 * Probablity{T}
						  = 1 * (1/2) + 0 * (1/2)
				=>	E(Xh) = (1/2) = Probablity{H}

				Lemma: Given a sample space 'S' and an event 'A'
					   let XA = I{A}
					   E(XA) + Probablity{A}

				For 'N' flips:-
					x = sum(i=1 to n, xi)
				=>  E(x) = E()

				************** incomplete

				Analysing Hiring problem with IRV:-
					X -> Random variable (# times we hire a new assistant)
				=>  X = sum(xi) where i = 1, 2, 3, 4, 5 ... n
				and Xi = 1; if the ith andidate is hired 
						 0; otherwise

					E(Xi) = Probablity{candidate i being hired}

					NOTE:- Candidate i is hired iff:-
						   C[i] better than C[1] to C[i-1]

					Probablity{Candidate being hired} = 1/i
				
				**************** incomplete

				Harmonic Series (positive integer):-
					Hn = 1 + 1/2 + 1/3 + ... + 1/n
					Hn = sum(1/i, i=1 to n) = log n

				Reduced cost = O(log nCh + nCi)
				We will be hiring log n people out of n interviewed people 

Ford Fulkerson Algorithm for Maximum Flow Problem
Problem Statement: Given a graph G(V, E) which represents a flow network where every edge has a capacity
				   Also given two vertices source(s) and sink(t). Find out the maximum possible flow from the 
				   source s to the sink t with the following constraints:-
				
			1) Flow on an edge does not exceed the given capacity of the edge.
			2) In flow is equal to out flow for every vertex except source and sink vertices

	Algorithm:-
		1) Start with an initial flow of 0
		2) While there is an augmenting path from source to sink add this path flow to the total flow of the graph
		3) Return the total flow of the graph

	*** see graph in screenshot ***

	Terminologies:-
		1) Residual Graph: It is a graph which indiates additional possible flow. If there is such path from source to rink then
		                   there is a possiblility to add the flow
		2) Residual Capacity: Original capacity of an edge - Flow on that edge
		3) Minimal Cut: Also know as bottleneck capacity, which decides the maximum possible porrible flow from source to sink
						through an augmented path
		4) Augmenting Path: This can be done in 2 ways
							a) Non-full forward edges
							b) Non-empty backward edges
							